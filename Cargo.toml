# SPDX-FileCopyrightText: 2021 Robin Vobruba <hoijui.quaero@gmail.com>
#
# SPDX-License-Identifier: Unlicense

[package]
name = "repvar"
version = "0.11.0"
authors = ["Robin Vobruba <hoijui.quaero@gmail.com>"]
description = """
    A tiny CLI tool that replaces variables of the style `${KEY}`
    in text with their respective value.
    It can also be used as a rust library
    """
license = "GPL-3.0-or-later"
repository = "https://github.com/hoijui/repvar"
keywords = ["cli", "ci", "variable-replacement"]
categories = ["command-line-utilities", "text-processing"]
edition = "2021"

[lints.rust]
rust_2021_compatibility = "warn"

[lints.clippy]
all = "deny"
pedantic = "warn"
nursery = "warn"
cargo = "warn"
wildcard_enum_match_arm = "warn"
string_slice = "warn"
indexing_slicing = "warn"
clone_on_ref_ptr = "warn"
try_err = "warn"
shadow_reuse = "warn"
empty_structs_with_brackets = "warn"
else_if_without_else = "warn"
use_debug = "warn"
print_stdout = "warn"
print_stderr = "warn"
#default_trait_access = "allow"
# // NOTE allowed because:
# //      If the same regex is going to be applied to multiple inputs,
# //      the precomputations done by Regex construction
# //      can give significantly better performance
# //      than any of the `str`-based methods.
# trivial_regex = "allow"
# struct_excessive_bools = "allow"
# fn_params_excessive_bools = "allow"

[dependencies]
clap = { version = "4.0", features = ["cargo"] }
cli-utils = { version = "0.5", git = "https://github.com/hoijui/cli-utils-rs.git" }
const_format = "0.2"
dotenvy = "0.15"
env_logger = { version = "0.10", default-features = false }
git-version = "0.3"
lazy_static = "1.4"
log = "0.4"
regex = "1.6"
thiserror = "1.0"
typed-builder = "0.18"

[dev-dependencies]
assert_cmd = "2.0"
predicates = "3.0"
tempfile = "3.3"
